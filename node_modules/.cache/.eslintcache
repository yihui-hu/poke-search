[{"/Users/yihui/poke-search/src/index.js":"1","/Users/yihui/poke-search/src/App.js":"2","/Users/yihui/poke-search/src/reportWebVitals.js":"3","/Users/yihui/poke-search/src/components/PokeView.js":"4","/Users/yihui/poke-search/src/components/Main.js":"5","/Users/yihui/poke-search/src/components/Types.js":"6","/Users/yihui/poke-search/src/components/Stats.js":"7","/Users/yihui/poke-search/src/components/Abilities.js":"8","/Users/yihui/poke-search/src/components/AbilityDesc.js":"9","/Users/yihui/poke-search/src/components/Evolutions.js":"10","/Users/yihui/poke-search/src/components/PokedexEntry.js":"11","/Users/yihui/poke-search/src/components/Moves.js":"12","/Users/yihui/poke-search/src/components/MoveDetails.js":"13","/Users/yihui/poke-search/src/hooks/useMediaQuery.jsx":"14","/Users/yihui/poke-search/src/components/FunFacts.js":"15","/Users/yihui/poke-search/src/components/Info.js":"16","/Users/yihui/poke-search/src/components/AllPokemon.js":"17","/Users/yihui/poke-search/src/components/ToggleView.js":"18","/Users/yihui/poke-search/src/components/PokemonCard.js":"19","/Users/yihui/poke-search/src/components/PokemonCards.js":"20"},{"size":535,"mtime":1654176196081,"results":"21","hashOfConfig":"22"},{"size":127,"mtime":1654262563229,"results":"23","hashOfConfig":"22"},{"size":362,"mtime":1654176196082,"results":"24","hashOfConfig":"22"},{"size":1256,"mtime":1654607169074,"results":"25","hashOfConfig":"22"},{"size":12755,"mtime":1654872403304,"results":"26","hashOfConfig":"22"},{"size":4030,"mtime":1654496280333,"results":"27","hashOfConfig":"22"},{"size":1666,"mtime":1654594332664,"results":"28","hashOfConfig":"22"},{"size":960,"mtime":1654872108054,"results":"29","hashOfConfig":"22"},{"size":1077,"mtime":1654422275874,"results":"30","hashOfConfig":"22"},{"size":4827,"mtime":1654593537507,"results":"31","hashOfConfig":"22"},{"size":1003,"mtime":1654500774965,"results":"32","hashOfConfig":"22"},{"size":2555,"mtime":1654536644405,"results":"33","hashOfConfig":"22"},{"size":6984,"mtime":1654593987503,"results":"34","hashOfConfig":"22"},{"size":515,"mtime":1654498720742,"results":"35","hashOfConfig":"22"},{"size":2733,"mtime":1654588248114,"results":"36","hashOfConfig":"22"},{"size":1327,"mtime":1654594530871,"results":"37","hashOfConfig":"22"},{"size":8881,"mtime":1654788074520,"results":"38","hashOfConfig":"22"},{"size":363,"mtime":1654682658034,"results":"39","hashOfConfig":"22"},{"size":602,"mtime":1654787998575,"results":"40","hashOfConfig":"22"},{"size":215,"mtime":1654871945584,"results":"41","hashOfConfig":"22"},{"filePath":"42","messages":"43","suppressedMessages":"44","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1j1cc3j",{"filePath":"45","messages":"46","suppressedMessages":"47","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","suppressedMessages":"53","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"54","messages":"55","suppressedMessages":"56","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","suppressedMessages":"66","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","suppressedMessages":"69","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"70"},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"74","usedDeprecatedRules":"75"},{"filePath":"76","messages":"77","suppressedMessages":"78","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"79"},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87"},{"filePath":"88","messages":"89","suppressedMessages":"90","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"102"},{"filePath":"103","messages":"104","suppressedMessages":"105","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"106","messages":"107","suppressedMessages":"108","errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"109","messages":"110","suppressedMessages":"111","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"/Users/yihui/poke-search/src/index.js",[],[],"/Users/yihui/poke-search/src/App.js",[],[],"/Users/yihui/poke-search/src/reportWebVitals.js",[],[],"/Users/yihui/poke-search/src/components/PokeView.js",["112"],[],"/Users/yihui/poke-search/src/components/Main.js",["113","114"],[],"import React from \"react\"\nimport { useState, useEffect } from \"react\"\nimport PokeView from \"./PokeView\"\nimport Info from \"./Info\"\nimport AllPokemon from \"./AllPokemon\"\nimport PokemonCard from \"./PokemonCard\"\nimport PokemonCards from \"./PokemonCards\"\nimport axios from \"axios\"\n\nexport default function Main() {\n    const [pokemonName, setPokemonName] = useState(\"\")\n\n    // default Pokemon is Grovyle :)\n    const [pokemon, setPokemon] = useState({\n        name: \"GROVYLE\",\n        img: \"https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/253.png\",\n        type_1: \"grass\",\n        type_2: \"nil\",\n        hp: 50,\n        attack: 65,\n        defense: 45,\n        special_attack: 85,\n        special_defense: 65,\n        speed: 95,\n        abilities: [{ ability: { name: \"Overgrow\" } }, { ability: { name: \"Unburden\" } }],\n        id: 253\n    })\n\n    function handleChange(event) {\n        setPokemonName(event.target.value)\n    }\n\n    let [errorMessage, setErrorMessage] = useState(\"\")\n\n    async function searchPokemon(event) {\n        event.preventDefault()\n        try {\n            let response = await axios.get(`https://pokeapi.co/api/v2/pokemon-species/${pokemonName.trim().toLowerCase()}`)\n            let url = response.data.varieties[0].pokemon.url\n            response = await axios.get(url)\n            let mon = response.data\n\n            setPokemon({\n                name: mon.name.toUpperCase(),\n                img: mon.sprites.other['official-artwork'].front_default,\n                type_1: mon.types[0].type.name,\n                type_2: mon.types[1] ? mon.types[1].type.name : \"nil\",\n                hp: mon.stats[0].base_stat,\n                attack: mon.stats[1].base_stat,\n                defense: mon.stats[2].base_stat,\n                special_attack: mon.stats[3].base_stat,\n                special_defense: mon.stats[4].base_stat,\n                speed: mon.stats[5].base_stat,\n                abilities: mon.abilities,\n                id: mon.id\n            })\n\n            setErrorMessage(\"\")\n        } catch(error) {\n            try {\n                let response = await axios.get(`https://pokeapi.co/api/v2/pokemon/${pokemonName.trim().toLowerCase()}`)\n                let mon = response.data\n\n                setPokemon({\n                name: mon.name.toUpperCase(),\n                img: mon.sprites.other['official-artwork'].front_default,\n                type_1: mon.types[0].type.name,\n                type_2: mon.types[1] ? mon.types[1].type.name : \"nil\",\n                hp: mon.stats[0].base_stat,\n                attack: mon.stats[1].base_stat,\n                defense: mon.stats[2].base_stat,\n                special_attack: mon.stats[3].base_stat,\n                special_defense: mon.stats[4].base_stat,\n                speed: mon.stats[5].base_stat,\n                abilities: mon.abilities,\n                id: mon.id\n                })\n\n                setErrorMessage(\"\")\n            } catch {\n                // catching errors (needed documentation for this one!)\n                setErrorMessage(\"Sorry! No such Pokemon exists.\")\n                console.log(error)\n            }\n        }\n    }\n\n    let [viewAll, setViewAll] = useState(false)\n\n    function calculateOffset(id) {\n        let offset = Math.floor(id/20) * 20\n        return offset\n    }\n\n    function toggleViewAll() {\n        setViewAll(!viewAll)\n    }\n\n    const [allPokemon, setAllPokemon] = useState([])\n    const [current, setCurrent] = useState(`https://pokeapi.co/api/v2/pokemon?limit=20&offset=${calculateOffset(pokemon.id)}`)\n\n    async function getAllPokemon(url) {\n        let response = await axios.get(url)\n        let data = await response.data\n        let results = await data.results\n\n        let array = []\n        results.forEach(async (pokemonData) => {\n            let response2 = await axios.get(pokemonData.url)\n            let data2 = await response2.data\n                \n            let mon = {\n                id: data2.id,\n                name: data2.name,\n                type_1: data2.types[0].type.name,\n                type_2: data2.types[1] ? data2.types[1].type.name : \"nil\",\n                img: data2.sprites.other['official-artwork'].front_default,\n            }\n            array.push(mon)\n        })\n\n        // array.sort((a,b) => \n        //     a.id - b.id\n        // )\n\n        setAllPokemon(array)\n    }\n\n    useEffect(() => {\n        getAllPokemon(current)\n    }, [current])\n\n    async function searchNext(event) {\n        event.preventDefault()\n        let newID = pokemon.id + 1\n        let response\n        try {\n            response = await axios.get(`https://pokeapi.co/api/v2/pokemon-species/${newID}`)\n        } catch {\n            setErrorMessage(\"Sorry! Unable to retrieve next Pokémon.\")\n            return\n        }\n        let newName = response.data.name\n\n        try {\n            let response = await axios.get(`https://pokeapi.co/api/v2/pokemon/${newName.trim().toLowerCase()}`)\n            let mon = response.data\n\n            setPokemon({\n                name: mon.name.toUpperCase(),\n                img: mon.sprites.other['official-artwork'].front_default,\n                type_1: mon.types[0].type.name,\n                type_2: mon.types[1] ? mon.types[1].type.name : \"nil\",\n                hp: mon.stats[0].base_stat,\n                attack: mon.stats[1].base_stat,\n                defense: mon.stats[2].base_stat,\n                special_attack: mon.stats[3].base_stat,\n                special_defense: mon.stats[4].base_stat,\n                speed: mon.stats[5].base_stat,\n                abilities: mon.abilities,\n                id: mon.id\n            })\n\n            setCurrent(`https://pokeapi.co/api/v2/pokemon?limit=20&offset=${calculateOffset(pokemon.id)}`)\n\n            setErrorMessage(\"\")\n        } catch(error) {\n            // catching errors (needed documentation for this one!)\n            setErrorMessage(\"Sorry! Unable to retrieve next Pokémon.\")\n            console.log(error)\n        }\n        window.scroll({\n            top: 0,\n            behavior: 'smooth'\n        })\n        // window.scroll(0, 180)\n    }\n\n    async function searchPrev(event) {\n        event.preventDefault()\n        let newID = pokemon.id - 1\n        let response\n        try {\n            response = await axios.get(`https://pokeapi.co/api/v2/pokemon-species/${newID}`)\n        } catch {\n            setErrorMessage(\"Sorry! Unable to retrieve previous Pokémon.\")\n            return\n        }\n        let newName = response.data.name\n\n        try {\n            let response = await axios.get(`https://pokeapi.co/api/v2/pokemon/${newName.trim().toLowerCase()}`)\n            let mon = response.data\n\n            setPokemon({\n                name: mon.name.toUpperCase(),\n                img: mon.sprites.other['official-artwork'].front_default,\n                type_1: mon.types[0].type.name,\n                type_2: mon.types[1] ? mon.types[1].type.name : \"nil\",\n                hp: mon.stats[0].base_stat,\n                attack: mon.stats[1].base_stat,\n                defense: mon.stats[2].base_stat,\n                special_attack: mon.stats[3].base_stat,\n                special_defense: mon.stats[4].base_stat,\n                speed: mon.stats[5].base_stat,\n                abilities: mon.abilities,\n                id: mon.id\n            })\n\n            setCurrent(`https://pokeapi.co/api/v2/pokemon?limit=20&offset=${calculateOffset(pokemon.id)}`)\n\n            setErrorMessage(\"\")\n        } catch(error) {\n            // catching errors (needed documentation for this one!)\n            setErrorMessage(\"Sorry! Unable to retrieve previous Pokémon.\")\n            console.log(error)\n        }\n        window.scroll({\n            top: 0,\n            left: 0,\n            behavior: 'smooth'\n        })\n        // window.scroll(0, 180)\n    }\n\n    async function setSinglePokemon(event) {\n        //get pokemon id\n        let id = event.target.id\n\n        let response = await axios.get(`https://pokeapi.co/api/v2/pokemon/${id}`)\n        let mon = response.data\n\n        setPokemon({\n            name: mon.name.toUpperCase(),\n            img: mon.sprites.other['official-artwork'].front_default,\n            type_1: mon.types[0].type.name,\n            type_2: mon.types[1] ? mon.types[1].type.name : \"nil\",\n            hp: mon.stats[0].base_stat,\n            attack: mon.stats[1].base_stat,\n            defense: mon.stats[2].base_stat,\n            special_attack: mon.stats[3].base_stat,\n            special_defense: mon.stats[4].base_stat,\n            speed: mon.stats[5].base_stat,\n            abilities: mon.abilities,\n            id: mon.id\n        })\n\n        setCurrent(`https://pokeapi.co/api/v2/pokemon?limit=20&offset=${calculateOffset(pokemon.id)}`)\n        console.log(current)\n\n        window.scroll({\n            top: 0,\n            left: 0,\n            behavior: 'smooth'\n        })\n\n        toggleViewAll()\n    }\n\n    function renderPokemonCards() {\n        return (\n            <>\n                {/* <h2 className=\"allPageNo\">Page No.</h2> */}\n                {allPokemon.map((pokemon) => \n                    <div key={pokemon.id} onClick={setSinglePokemon}>\n                        <PokemonCard data={pokemon}/>\n                    </div>)}   \n            </>\n        )\n    }\n\n    async function searchNextAll() {\n        let firstDigit\n        for (let i = current.length; i > 0; i--) {\n            if (current[i] === \"=\") {\n                firstDigit = i + 1\n                break\n            }\n        }\n\n        let newOffset = parseInt(current.substring(firstDigit, current.length)) + 20\n        if (newOffset <= 880) {\n            let newURL = `https://pokeapi.co/api/v2/pokemon?limit=20&offset=${newOffset}`\n            setCurrent(newURL)\n            let response = await axios.get(newURL)\n            let data = await response.data\n\n            let array = []\n            data.results.forEach(async (pokemonData) => {\n                let response2 = await axios.get(pokemonData.url)\n                let data2 = await response2.data\n                \n                let mon = {\n                    id: data2.id,\n                    name: data2.name,\n                    type_1: data2.types[0].type.name,\n                    type_2: data2.types[1] ? data2.types[1].type.name : \"nil\",\n                    img: data2.sprites.other['official-artwork'].front_default,\n                }\n                array.push(mon)\n            })\n            setAllPokemon(array)\n        }\n    }\n\n    async function searchPrevAll() {\n        let response = await axios.get(current)\n        let data = await response.data\n        let prev = await data.previous\n        setCurrent(prev)\n    }\n\n    return (\n        <div>\n            <div className=\"header\">\n                <Info />\n                <h1>pokéSearch</h1>\n                <input\n                    className=\"input\"\n                    placeholder=\"Enter Pokémon's name here...\"\n                    autoComplete=\"off\"\n                    value={pokemonName}\n                    onChange={handleChange}\n                />\n                <button\n                    className=\"submit\"\n                    onClick={searchPokemon}\n                >SEARCH</button>\n                {errorMessage !== \"\" && <h4>{errorMessage}</h4>}\n            </div>\n            {/* <AllPokemon pokemon={pokemon}/> */}\n            <button\n                className=\"navigation right\"\n                style={{ float: \"right\" }}\n                onClick={viewAll ? searchNextAll : searchNext}\n            >{`next ▶`}</button>\n            <button\n                className=\"navigation left\"\n                style={{ float: \"left\" }}\n                onClick={viewAll ? searchPrevAll : searchPrev}\n            >{`◀ prev`}</button>\n\n            <div className=\"toggleView\" onClick={toggleViewAll}>{viewAll ? \"\" : \"All\"}</div>\n            {!viewAll && <PokeView pokemon={pokemon} />}\n            {/* {viewAll && renderPokemonCards()} */}\n            {viewAll && <PokemonCards allPokemon={allPokemon} />}\n\n            <h2 className=\"footer\">Made with data from <a href=\"https://pokeapi.co/\">PokéAPI. </a> \n            View project on <a href=\"https://github.com/yihui-hu/poke-search\">GitHub.</a></h2>\n            <br></br>\n            <br></br>\n            <button\n                className=\"navigation rightbottom\"\n                style={{ float: \"right\" }}\n                onClick={viewAll ? searchNextAll : searchNext}\n            >{`next ▶`}</button>\n            <button\n                className=\"navigation leftbottom\"\n                style={{ float: \"left\" }}\n                onClick={viewAll ? searchPrevAll : searchPrev}\n            >{`◀ prev`}</button>\n        </div>\n    )\n}","/Users/yihui/poke-search/src/components/Types.js",[],[],"/Users/yihui/poke-search/src/components/Stats.js",[],[],"/Users/yihui/poke-search/src/components/Abilities.js",["115"],[],"/Users/yihui/poke-search/src/components/AbilityDesc.js",["116","117","118"],[],"import React from \"react\"\nimport { useState, useEffect } from \"react\"\nimport axios from \"axios\"\n\n\nexport default function AbilityDesc(props) {\n\n    let ability = props.ability.toLowerCase()\n    let [abilityDesc, setAbilityDesc] = useState(\"\")\n    \n    let getDescription = async ability => {\n        try {\n            let url = `https://pokeapi.co/api/v2/ability/${ability}`\n            let response = await axios.get(url)\n            let descriptions = response.data.effect_entries\n            if (descriptions.length === 0) {\n                throw (\"Sorry! Data not available.\")\n            }\n            // get english descriptions only\n            for (let i = 0; i < descriptions.length; i++) {\n                if (descriptions[i].language.name == \"en\") {\n                    setAbilityDesc(descriptions[i].short_effect)\n                }\n            }\n        } catch (error) {\n            setAbilityDesc(error)\n        }\n    }\n\n    useEffect(() => {\n        getDescription(ability);\n    }, [])\n\n    return (\n        <h4 className=\"abilityDesc\">{abilityDesc}</h4>\n    )\n}","/Users/yihui/poke-search/src/components/Evolutions.js",["119","120","121","122","123","124","125","126"],[],"import React from \"react\"\nimport { useState, useEffect } from \"react\"\nimport axios from \"axios\"\n\n\nexport default function Evolutions(props) {\n\n    let mon = props.name.toLowerCase()\n    let backup_name = mon\n    mon = mon.split('-')[0]\n\n    let dummy = [\n        {\n            id: 1,\n            name: \"unknown\",\n            img: \"https://upload.wikimedia.org/wikipedia/commons/4/46/Question_mark_%28black%29.svg\"\n        },\n        {\n            id: 2,\n            name: \"nil\",\n            img: \"nil\"\n        },\n        {\n            id: 3,\n            name: \"nil\",\n            img: \"nil\"\n        }\n    ]\n\n    let [evolution, setEvolution] = useState([\n        {\n            id: 1,\n            name: \"treecko\",\n            img: \"nil\"\n        },\n        {\n            id: 2,\n            name: \"grovyle\",\n            img: \"nil\"\n        },\n        {\n            id: 3,\n            name: \"sceptile\",\n            img: \"nil\"\n        }\n    ])\n\n    useEffect(() => {\n        axios.get(`https://pokeapi.co/api/v2/pokemon-species/${mon}`)\n            .then((response) => {\n                axios.get(response.data.evolution_chain.url)\n                    .then((response) => {\n                        let data = response.data.chain\n                        getData(data)\n                    })\n            })\n            .catch((error) => {\n                axios.get(`https://pokeapi.co/api/v2/pokemon-species/${backup_name}`)\n                    .then((response) => {\n                        axios.get(response.data.evolution_chain.url)\n                            .then((response) => {\n                                let data = response.data.chain\n                                getData(data)\n                            })\n                    })\n                    .catch((error) => {\n                        setEvolution(dummy)\n                        console.log(error)\n                    })\n            })\n            \n    }, [mon])\n\n    async function getData(data) {\n        let stage1 = data.species.name\n        let stage2 = data.evolves_to.length !== 0 ? data.evolves_to[0].species.name : \"nil\"\n        let stage3 = \"nil\"\n    \n        if (data.evolves_to.length !== 0) {\n            if (data.evolves_to[0].evolves_to.length !== 0) {\n                stage3 = data.evolves_to[0].evolves_to[0].species.name\n            }\n        }\n\n        let img1, img2, img3\n        let response\n\n        try {\n            response = await axios.get(`https://pokeapi.co/api/v2/pokemon/${stage1}`)\n            img1 = response.data.sprites.front_default\n        } catch {\n            try {\n                // for pesky pokemon forms like giratina...\n                response = await axios.get(`https://pokeapi.co/api/v2/pokemon/${backup_name}`)\n                img1 = response.data.sprites.front_default\n            } catch {\n                setEvolution(dummy)\n            }\n        }\n        \n        if (stage2 != \"nil\") {\n            try {\n                response = await axios.get(`https://pokeapi.co/api/v2/pokemon/${stage2}`)\n                img2 = response.data.sprites.front_default\n            } catch {\n                setEvolution(dummy)\n            }\n        }\n\n        if (stage3 != \"nil\") {\n            try {\n                response = await axios.get(`https://pokeapi.co/api/v2/pokemon/${stage3}`)\n                img3 = response.data.sprites.front_default\n            } catch {\n                setEvolution(dummy)\n            }\n        }\n\n        let evo = \n        [\n            {\n                id: 1,\n                name: `${stage1.charAt(0).toUpperCase() + stage1.slice(1)}`,\n                img: `${img1 != undefined ? img1 : `https://upload.wikimedia.org/wikipedia/commons/4/46/Question_mark_%28black%29.svg`}`\n            },\n            {\n                id: 2,\n                name: `${stage2.charAt(0).toUpperCase() + stage2.slice(1)}`,\n                img: `${img2 != undefined ? img2 : `https://upload.wikimedia.org/wikipedia/commons/4/46/Question_mark_%28black%29.svg`}`\n            },\n            { \n                id: 3,\n                name: `${stage3.charAt(0).toUpperCase() + stage3.slice(1)}`,\n                img: `${img3 != undefined ? img3 : `https://upload.wikimedia.org/wikipedia/commons/4/46/Question_mark_%28black%29.svg`}`\n            }\n        ]\n\n        setEvolution(evo)\n    }\n\n    function renderEvoChain() {\n        return evolution.map((stage) => {\n\n            if (stage.name !== \"Nil\" && stage.name !== \"nil\") {\n                return (\n                    <div key={stage.id} className=\"column evolutions\">\n                        <h1>{stage.name}</h1>\n                        <img src={stage.img} />\n                    </div>\n                )\n            }\n        })\n    }\n\n    return (\n        <div className=\"row 2 customRow\">\n            {renderEvoChain()}\n        </div>\n    )\n}",[],"/Users/yihui/poke-search/src/components/PokedexEntry.js",["127"],[],"import React from \"react\"\nimport { useState, useEffect } from \"react\"\nimport axios from \"axios\"\n\nexport default function PokedexEntry(props) {\n\n    let id = props.id\n    let [pokedexEntry, setPokedexEntry] = useState(\"Data unknown.\")\n    \n    async function getData() {\n        try {\n            let response = await axios.get(`https://pokeapi.co/api/v2/pokemon-species/${id}`)\n            let data = response.data.flavor_text_entries\n            for (let i = 0; i < data.length; i++) {\n                let datum = response.data.flavor_text_entries[i]\n                if (datum.language.name === \"en\") {\n                    setPokedexEntry(datum.flavor_text)\n                }\n            }\n        } catch {\n            setPokedexEntry(\"Sorry! Data not available.\")\n        }\n    }\n\n    useEffect(() => {\n        getData();\n    }, [id])\n\n    return (\n        <div>\n            <h1 className=\"title\">POKÉDEX ENTRY</h1>\n            <h2 className=\"pokedexEntry\">{pokedexEntry}</h2>\n        </div>\n    )\n}","/Users/yihui/poke-search/src/components/Moves.js",["128","129"],[],"import React from \"react\"\nimport { useState, useEffect } from \"react\"\nimport axios from \"axios\"\nimport MoveDetails from \"./MoveDetails\"\nimport useMediaQuery from \"../hooks/useMediaQuery\";\n\nexport default function Moves(props) {\n\n    const isDesktop = useMediaQuery('(min-width: 480px)')\n    \n    let name = props.name.toLowerCase()\n    let [moves, setMoves] = useState([])\n\n    function formatter(name) {\n        let word = name.split(\" \")\n        for (let i = 0; i < word.length; i++) {\n            word[i] = word[i][0].toUpperCase() + word[i].substr(1);\n        }\n        return word.join(\" \")\n    }\n\n    async function getMoves() {\n        try {\n            let response = await axios.get(`https://pokeapi.co/api/v2/pokemon/${name}`)\n            setMoves(response.data.moves)\n        } catch {\n            console.log(\"Data not available.\")\n        }\n    }\n\n    function renderMoves() {\n\n        // first sort moves by level learned\n        moves.sort((a,b) => \n            a.version_group_details[0].level_learned_at - b.version_group_details[0].level_learned_at \n        )\n\n        return moves.map((move) => {\n            if (move.version_group_details[0].level_learned_at !== 0) {\n                return (\n                <MoveDetails\n                    key={move.move.name}\n                    moveName={formatter(move.move.name.replaceAll('-',' '))}\n                    moveLevel={move.version_group_details[0].level_learned_at}\n                    moveURL={move.move.url}\n                />\n                )\n            }\n        })\n    }\n\n    useEffect(() => {\n        getMoves()\n    }, [name])\n\n    return (\n        <div>\n            <h1 className=\"title\">MOVES</h1>\n            <p className=\"moves-info\">(click on a move's name for more info!)</p>\n            <table className=\"moves\">\n            <tbody>\n                <tr>\n                    <th className=\"moves-header\">Level</th>\n                    <th className=\"moves-header\">Move</th>\n                    <th className=\"moves-header\">Type</th>\n                    {isDesktop && <th className=\"moves-header\">Power</th>}\n                    {isDesktop && <th className=\"moves-header\">Accuracy</th>}\n                </tr>\n                <tr>\n                    <th><hr></hr></th>\n                    <th><hr></hr></th>\n                    <th><hr></hr></th>\n                    {isDesktop && <th><hr></hr></th>}\n                    {isDesktop && <th><hr></hr></th>}\n                </tr>\n                {renderMoves()}\n            </tbody>\n        </table>\n        </div>\n    )\n}","/Users/yihui/poke-search/src/components/MoveDetails.js",["130"],[],"import React from \"react\"\nimport { useEffect, useState } from \"react\"\nimport useMediaQuery from \"../hooks/useMediaQuery\";\nimport axios from \"axios\"\n\nexport default function MoveDetails(props) {\n\n    const isDesktop = useMediaQuery('(min-width: 480px)')\n\n    let moveURL = props.moveURL\n    let moveLevel = props.moveLevel\n    let moveName = props.moveName\n    \n    let [moveDetails, setMoveDetails] = useState({\n        type: {\n            name: \"\"\n        },\n        power: \"-\",\n        accuracy: \"-\",\n        damage_class: {\n            name: \"\"\n        },\n        pp: \"-\",\n        priority: 0,\n        flavor_text_entries: [\n            {\n                flavor_text: \"\",\n                language: {\n                    name: \"en\"\n                }\n            }\n        ],\n        effect_chance: 0,\n    })\n\n    async function getMoveDetails() {\n        let response = await axios.get(moveURL)\n        let data = response.data\n        setMoveDetails(data)\n    }\n\n    useEffect(() => {\n        getMoveDetails()\n    }, [moveURL])\n\n    const colours = {\n        normal: '#A8A77A',\n        fire: '#EE8130',\n        water: '#6390F0',\n        electric: '#F7D02C',\n        grass: '#7AC74C',\n        ice: '#96D9D6',\n        fighting: '#C22E28',\n        poison: '#A33EA1',\n        ground: '#E2BF65',\n        flying: '#A98FF3',\n        psychic: '#F95587',\n        bug: '#A6B91A',\n        rock: '#B6A136',\n        ghost: '#735797',\n        dragon: '#6F35FC',\n        dark: '#705746',\n        steel: '#B7B7CE',\n        fairy: '#D685AD',\n    };\n\n    function determineColor(type) {\n        if (type === \"grass\") {\n            return {\n                color: \"white\",\n                backgroundColor: colours.grass,\n                borderRadius: \"25px\",\n            }\n        } else if (type === \"water\") {\n            return {\n                color: \"white\",\n                backgroundColor: colours.water,\n                borderRadius: \"25px\",\n            }\n        } else if (type === \"fire\") {\n            return {\n                color: \"white\",\n                backgroundColor: colours.fire,\n                borderRadius: \"25px\",\n            }\n        } else if (type === \"normal\") {\n            return {\n                color: \"white\",\n                backgroundColor: colours.normal,\n                borderRadius: \"25px\",\n            }\n        } else if (type === \"electric\") {\n            return {\n                color: \"white\",\n                backgroundColor: colours.electric,\n                borderRadius: \"25px\",\n            }\n        } else if (type === \"ice\") {\n            return {\n                color: \"white\",\n                backgroundColor: colours.ice,\n                borderRadius: \"25px\",\n            }\n        } else if (type === \"fighting\") {\n            return {\n                color: \"white\",\n                backgroundColor: colours.fighting,\n                borderRadius: \"25px\",\n            }\n        } else if (type === \"poison\") {\n            return {\n                color: \"white\",\n                backgroundColor: colours.poison,\n                borderRadius: \"25px\",\n            }\n        } else if (type === \"ground\") {\n            return {\n                color: \"white\",\n                backgroundColor: colours.ground,\n                borderRadius: \"25px\",\n            }\n        } else if (type === \"flying\") {\n            return {\n                color: \"white\",\n                backgroundColor: colours.flying,\n                borderRadius: \"25px\",\n            }\n        } else if (type === \"psychic\") {\n            return {\n                color: \"white\",\n                backgroundColor: colours.psychic,\n                borderRadius: \"25px\",\n            }\n        } else if (type === \"bug\") {\n            return {\n                color: \"white\",\n                backgroundColor: colours.bug,\n                borderRadius: \"25px\",\n            }\n        } else if (type === \"rock\") {\n            return {\n                color: \"white\",\n                backgroundColor: colours.rock,\n                borderRadius: \"25px\",\n            }\n        } else if (type === \"ghost\") {\n            return {\n                color: \"white\",\n                backgroundColor: colours.ghost,\n                borderRadius: \"25px\",\n            }\n        } else if (type === \"dragon\") {\n            return {\n                color: \"white\",\n                backgroundColor: colours.dragon,\n                borderRadius: \"25px\",\n            }\n        } else if (type === \"dark\") {\n            return {\n                color: \"white\",\n                backgroundColor: colours.dark,\n                borderRadius: \"25px\",\n            }\n        } else if (type === \"steel\") {\n            return {\n                color: \"white\",\n                backgroundColor: colours.steel,\n                borderRadius: \"25px\",\n            }\n        } else if (type === \"fairy\") {\n            return {\n                color: \"white\",\n                backgroundColor: colours.fairy,\n                borderRadius: \"25px\",\n            }\n        } else {\n            return {\n                color: \"white\",\n                backgroundColor: \"black\",\n                borderRadius: \"25px\",\n            }\n        }\n    }\n\n    const [modal, setModal] = useState(false);\n\n    const toggleModal = () => {\n        setModal(!modal)\n    }\n\n    function moveDescription() {\n        for (let i = 0; i < moveDetails.flavor_text_entries.length; i++) {\n            if (moveDetails.flavor_text_entries[i].language.name === \"en\") {\n                return <p>{moveDetails.flavor_text_entries[i].flavor_text}</p>\n            }\n        }\n    }\n\n    return (\n        <>\n        <tr>\n            <th className=\"moves-level\">{moveLevel}</th>\n            <th className=\"moves-name\" onClick={toggleModal}>{moveName}</th>\n            <th className=\"moves-type\" style={determineColor(moveDetails.type.name)}>{moveDetails.type.name.charAt(0).toUpperCase() + moveDetails.type.name.slice(1)}</th>\n            {isDesktop && <th className=\"moves-power\">{moveDetails.power != null ? moveDetails.power : \"-\"}</th>}\n            {isDesktop && <th className=\"moves-accuracy\">{moveDetails.accuracy != null ? moveDetails.accuracy : \"-\"}</th>}\n        </tr>\n        {modal && <div className=\"modal\">\n                <div className=\"overlay\">\n                    <div className=\"modal-content\">\n                        <h2>{moveName}</h2>\n                        {moveDescription()}\n                        <p>This is a {moveDetails.damage_class.name} move which  {moveDetails.power != null ? `has a power of ${moveDetails.power}` : `has no/varied power`} {moveDetails.accuracy != null ? `and an accuracy of ${moveDetails.accuracy}%` : \"and always lands\"}.</p>\n                        <p>It has a PP of {moveDetails.pp}.</p>\n                        <button className=\"close-modal\" onClick={toggleModal}>×\n                        </button>\n                    </div>\n                </div>\n            </div>}\n        </>\n    )\n}","/Users/yihui/poke-search/src/hooks/useMediaQuery.jsx",[],[],"/Users/yihui/poke-search/src/components/FunFacts.js",["131","132"],[],"import React from \"react\"\nimport { useState, useEffect } from \"react\"\nimport axios from \"axios\"\n\nexport default function FunFacts(props) {\n    let hp = props.hp\n    let name = props.name.toLowerCase()\n    if (name !== \"ho-oh\" && name !== \"mime-jr\" && name !== \"mr-mime\") {\n        name = name.split('-')[0]\n    }\n\n    let capitalisedName = name.charAt(0).toUpperCase() + name.slice(1)\n    let [facts, setFacts] = useState({\n        habitat: \"\",\n        growthRate: \"\",\n        varieties: [],\n        captureRate: 0,\n        isLegendary: false,\n        isMythical: false,\n    })\n\n    async function getTier() {\n        let response = await axios.get(`https://pokeapi.co/api/v2/pokemon-species/${name}`)\n        setFacts({\n            habitat: response.data.habitat,\n            growthRate: response.data.growth_rate.name,\n            varieties: response.data.varieties,\n            captureRate: response.data.capture_rate,\n            isLegendary: response.data.is_legendary,\n            isMythical: response.data.is_mythical\n        })\n    }\n\n    useEffect(() => {\n        getTier()\n    }, [name])\n\n    let maxHP = (((15.5 + 2*hp + 100)*50)/100) + 10\n    let chance = Math.round((maxHP * facts.captureRate)/(3*maxHP) * 10) / 10\n\n    function formatter(ability) {\n        let word = ability.split(\" \")\n        for (let i = 0; i < word.length; i++) {\n            word[i] = word[i][0].toUpperCase() + word[i].substr(1);\n        }\n        return word.join(\"-\")\n    }\n\n    let form_counter = 0\n\n    return (\n        <div className=\"funfacts\">\n            <h1 className=\"title\">FUN FACT(S)</h1>\n\n            <h2 className=\"funfacts-spacer\">• {capitalisedName} has a capture rate of {facts.captureRate}.</h2>\n            <h2> &nbsp; At Level 50 and with full HP, you have a ~{chance}% of catching it with a regular Pokéball.<hr></hr></h2>\n\n            <h2>• It has a {facts.growthRate} growth rate.<hr></hr></h2>\n\n            <h2>• It tends to live in {facts.habitat !== null ? facts.habitat.name : `[redacted]`} areas.<hr></hr></h2>\n\n            {facts.isLegendary && <h2>• {capitalisedName} is also a legendary Pokémon!<hr></hr></h2>}\n\n            {facts.isMythical && <h2>• {capitalisedName} is also a mythical Pokémon!<hr></hr></h2>}\n\n            {facts.varieties.length > 1 && <h2>• {capitalisedName} also has other forms: {facts.varieties.map((form) => {\n                if (form.pokemon.name !== name) {\n                    form_counter++\n                    return <h4 className=\"funfacts-center\">{form_counter}. {formatter(form.pokemon.name.replaceAll('-',' '))}</h4>\n                }\n            })}<h4 className=\"funfacts-center\">Try looking them up above!</h4><hr></hr></h2>}\n            \n        </div>\n    )\n}","/Users/yihui/poke-search/src/components/Info.js",[],[],"/Users/yihui/poke-search/src/components/AllPokemon.js",["133","134"],[],"import React from \"react\"\nimport { useState, useEffect } from \"react\"\nimport PokeView from \"./PokeView\"\nimport PokemonCard from \"./PokemonCard\"\nimport Types from \"./Types\"\nimport axios from \"axios\"\n\n// make container 75vw?\n// make each column width of 25vw, will be 75vw in total (3 columns?)\n\nexport default function AllPokemon(props) {\n\n    const [pokemon, setPokemon] = useState(props.pokemon)\n    let [viewAll, setViewAll] = useState(false)\n\n    // so that searching still works\n    useEffect(() => {\n        setPokemon(props.pokemon)\n    }, [props])\n\n    function calculateOffset(id) {\n        let offset = Math.floor(id/20) * 20\n        return offset\n    }\n\n    function toggleViewAll() {\n        setViewAll(!viewAll)\n    }\n\n    const [allPokemon, setAllPokemon] = useState([])\n    const [current, setCurrent] = useState(`https://pokeapi.co/api/v2/pokemon?limit=20&offset=${calculateOffset(props.pokemon.id)}`)\n\n    async function getAllPokemon(url) {\n        let response = await axios.get(url)\n        let data = await response.data\n\n        let array = []\n        data.results.forEach(async (pokemonData) => {\n            let response2 = await axios.get(pokemonData.url)\n            let data2 = await response2.data\n                \n            let mon = {\n                id: data2.id,\n                name: data2.name,\n                type_1: data2.types[0].type.name,\n                type_2: data2.types[1] ? data2.types[1].type.name : \"nil\",\n                img: data2.sprites.other['official-artwork'].front_default,\n            }\n            array.push(mon)\n        })\n        setAllPokemon(array)\n    }\n\n    // onClick event, call getAllPokemon\n\n    useEffect(() => {\n        getAllPokemon(current)\n    }, [pokemon, current])\n\n    let [errorMessage, setErrorMessage] = useState(\"\")\n\n    async function searchNext(event) {\n        event.preventDefault()\n        let newID = pokemon.id + 1\n        let response\n        try {\n            response = await axios.get(`https://pokeapi.co/api/v2/pokemon-species/${newID}`)\n        } catch {\n            setErrorMessage(\"Sorry! Unable to retrieve next Pokémon.\")\n            return\n        }\n        let newName = response.data.name\n\n        try {\n            let response = await axios.get(`https://pokeapi.co/api/v2/pokemon/${newName.trim().toLowerCase()}`)\n            let mon = response.data\n\n            setPokemon({\n                name: mon.name.toUpperCase(),\n                img: mon.sprites.other['official-artwork'].front_default,\n                type_1: mon.types[0].type.name,\n                type_2: mon.types[1] ? mon.types[1].type.name : \"nil\",\n                hp: mon.stats[0].base_stat,\n                attack: mon.stats[1].base_stat,\n                defense: mon.stats[2].base_stat,\n                special_attack: mon.stats[3].base_stat,\n                special_defense: mon.stats[4].base_stat,\n                speed: mon.stats[5].base_stat,\n                abilities: mon.abilities,\n                id: mon.id\n            })\n\n            setCurrent(`https://pokeapi.co/api/v2/pokemon?limit=20&offset=${calculateOffset(pokemon.id)}`)\n\n            setErrorMessage(\"\")\n        } catch(error) {\n            // catching errors (needed documentation for this one!)\n            setErrorMessage(\"Sorry! Unable to retrieve next Pokémon.\")\n            console.log(error)\n        }\n        window.scroll({\n            top: 0,\n            behavior: 'smooth'\n        })\n        // window.scroll(0, 180)\n    }\n\n    async function searchPrev(event) {\n        event.preventDefault()\n        let newID = pokemon.id - 1\n        let response\n        try {\n            response = await axios.get(`https://pokeapi.co/api/v2/pokemon-species/${newID}`)\n        } catch {\n            setErrorMessage(\"Sorry! Unable to retrieve previous Pokémon.\")\n            return\n        }\n        let newName = response.data.name\n\n        try {\n            let response = await axios.get(`https://pokeapi.co/api/v2/pokemon/${newName.trim().toLowerCase()}`)\n            let mon = response.data\n\n            setPokemon({\n                name: mon.name.toUpperCase(),\n                img: mon.sprites.other['official-artwork'].front_default,\n                type_1: mon.types[0].type.name,\n                type_2: mon.types[1] ? mon.types[1].type.name : \"nil\",\n                hp: mon.stats[0].base_stat,\n                attack: mon.stats[1].base_stat,\n                defense: mon.stats[2].base_stat,\n                special_attack: mon.stats[3].base_stat,\n                special_defense: mon.stats[4].base_stat,\n                speed: mon.stats[5].base_stat,\n                abilities: mon.abilities,\n                id: mon.id\n            })\n\n            setCurrent(`https://pokeapi.co/api/v2/pokemon?limit=20&offset=${calculateOffset(pokemon.id)}`)\n\n            setErrorMessage(\"\")\n        } catch(error) {\n            // catching errors (needed documentation for this one!)\n            setErrorMessage(\"Sorry! Unable to retrieve previous Pokémon.\")\n            console.log(error)\n        }\n        window.scroll({\n            top: 0,\n            left: 0,\n            behavior: 'smooth'\n        })\n        // window.scroll(0, 180)\n    }\n\n    async function setSinglePokemon(event) {\n        toggleViewAll()\n        \n        //get pokemon id\n        let id = event.target.id\n\n        let response = await axios.get(`https://pokeapi.co/api/v2/pokemon/${id}`)\n        let mon = response.data\n\n        setPokemon({\n            name: mon.name.toUpperCase(),\n            img: mon.sprites.other['official-artwork'].front_default,\n            type_1: mon.types[0].type.name,\n            type_2: mon.types[1] ? mon.types[1].type.name : \"nil\",\n            hp: mon.stats[0].base_stat,\n            attack: mon.stats[1].base_stat,\n            defense: mon.stats[2].base_stat,\n            special_attack: mon.stats[3].base_stat,\n            special_defense: mon.stats[4].base_stat,\n            speed: mon.stats[5].base_stat,\n            abilities: mon.abilities,\n            id: mon.id\n        })\n\n        window.scroll({\n            top: 0,\n            left: 0,\n            behavior: 'smooth'\n        })\n    }\n\n    function renderPokemonCards() {\n        return (\n            <>\n                {/* <h2 className=\"allPageNo\">Page No.</h2> */}\n                {allPokemon.map((pokemon) => \n                    <div key={pokemon.id} onClick={setSinglePokemon}>\n                        <PokemonCard onClick={setSinglePokemon} data={pokemon}/>\n                    </div>)}   \n            </>\n        )\n    }\n\n    function searchNextAll() {\n        let firstDigit\n        for (let i = current.length; i > 0; i--) {\n            if (current[i] === \"=\") {\n                firstDigit = i + 1\n                break\n            }\n        }\n\n        let newOffset = parseInt(current.substring(firstDigit, current.length)) + 20\n        if (newOffset <= 880) {\n            let newURL = `https://pokeapi.co/api/v2/pokemon?limit=20&offset=${newOffset}`\n            setCurrent(newURL)\n            getAllPokemon(current)\n        }\n    }\n\n    function searchPrevAll() {\n        let firstDigit\n        for (let i = current.length; i > 0; i--) {\n            if (current[i] === \"=\") {\n                firstDigit = i + 1\n                break\n            }\n        }\n\n        let newOffset = parseInt(current.substring(firstDigit, current.length)) - 20\n        if (newOffset >= 0) {\n            let newURL = `https://pokeapi.co/api/v2/pokemon?limit=20&offset=${newOffset}`\n            setCurrent(newURL)\n            getAllPokemon(current)\n        }\n    }\n\n    return (\n        <>\n            <button\n                className=\"navigation right\"\n                style={{ float: \"right\" }}\n                onClick={viewAll ? searchNextAll : searchNext}\n            >{`next ▶`}</button>\n            <button\n                className=\"navigation left\"\n                style={{ float: \"left\" }}\n                onClick={viewAll ? searchPrevAll : searchPrev}\n            >{`◀ prev`}</button>\n\n            <div className=\"toggleView\" onClick={toggleViewAll}>{viewAll ? \"\" : \"All\"}</div>\n            {!viewAll && <PokeView pokemon={pokemon} />}\n            {viewAll && renderPokemonCards()}\n\n            <h2 className=\"footer\">Made with data from <a href=\"https://pokeapi.co/\">PokéAPI. </a> \n            View project on <a href=\"https://github.com/yihui-hu/poke-search\">GitHub.</a></h2>\n            <br></br>\n            <br></br>\n            <button\n                className=\"navigation rightbottom\"\n                style={{ float: \"right\" }}\n                onClick={viewAll ? searchNextAll : searchNext}\n            >{`next ▶`}</button>\n            <button\n                className=\"navigation leftbottom\"\n                style={{ float: \"left\" }}\n                onClick={viewAll ? searchPrevAll : searchPrev}\n            >{`◀ prev`}</button>\n        </>\n    )\n}",[],"/Users/yihui/poke-search/src/components/ToggleView.js",["135","136"],[],"/Users/yihui/poke-search/src/components/PokemonCard.js",["137","138","139","140"],[],"/Users/yihui/poke-search/src/components/PokemonCards.js",["141","142","143"],[],{"ruleId":"144","severity":1,"message":"145","line":18,"column":21,"nodeType":"146","endLine":18,"endColumn":61},{"ruleId":"147","severity":1,"message":"148","line":5,"column":8,"nodeType":"149","messageId":"150","endLine":5,"endColumn":18},{"ruleId":"147","severity":1,"message":"151","line":260,"column":14,"nodeType":"149","messageId":"150","endLine":260,"endColumn":32},{"ruleId":"147","severity":1,"message":"152","line":2,"column":10,"nodeType":"149","messageId":"150","endLine":2,"endColumn":18},{"ruleId":"153","severity":1,"message":"154","line":17,"column":17,"nodeType":"155","messageId":"156","endLine":17,"endColumn":53},{"ruleId":"157","severity":1,"message":"158","line":21,"column":51,"nodeType":"159","messageId":"160","endLine":21,"endColumn":53},{"ruleId":"161","severity":1,"message":"162","line":32,"column":8,"nodeType":"163","endLine":32,"endColumn":10,"suggestions":"164"},{"ruleId":"161","severity":1,"message":"165","line":72,"column":8,"nodeType":"163","endLine":72,"endColumn":13,"suggestions":"166"},{"ruleId":"157","severity":1,"message":"167","line":101,"column":20,"nodeType":"159","messageId":"160","endLine":101,"endColumn":22},{"ruleId":"157","severity":1,"message":"167","line":110,"column":20,"nodeType":"159","messageId":"160","endLine":110,"endColumn":22},{"ruleId":"157","severity":1,"message":"167","line":124,"column":30,"nodeType":"159","messageId":"160","endLine":124,"endColumn":32},{"ruleId":"157","severity":1,"message":"167","line":129,"column":30,"nodeType":"159","messageId":"160","endLine":129,"endColumn":32},{"ruleId":"157","severity":1,"message":"167","line":134,"column":30,"nodeType":"159","messageId":"160","endLine":134,"endColumn":32},{"ruleId":"168","severity":1,"message":"169","line":142,"column":38,"nodeType":"170","messageId":"171","endLine":142,"endColumn":40},{"ruleId":"144","severity":1,"message":"145","line":148,"column":25,"nodeType":"146","endLine":148,"endColumn":48},{"ruleId":"161","severity":1,"message":"172","line":27,"column":8,"nodeType":"163","endLine":27,"endColumn":12,"suggestions":"173"},{"ruleId":"168","severity":1,"message":"169","line":38,"column":33,"nodeType":"170","messageId":"171","endLine":38,"endColumn":35},{"ruleId":"161","severity":1,"message":"174","line":54,"column":8,"nodeType":"163","endLine":54,"endColumn":14,"suggestions":"175"},{"ruleId":"161","severity":1,"message":"176","line":44,"column":8,"nodeType":"163","endLine":44,"endColumn":17,"suggestions":"177"},{"ruleId":"161","severity":1,"message":"178","line":36,"column":8,"nodeType":"163","endLine":36,"endColumn":14,"suggestions":"179"},{"ruleId":"168","severity":1,"message":"169","line":66,"column":118,"nodeType":"170","messageId":"171","endLine":66,"endColumn":120},{"ruleId":"147","severity":1,"message":"180","line":5,"column":8,"nodeType":"149","messageId":"150","endLine":5,"endColumn":13},{"ruleId":"147","severity":1,"message":"181","line":60,"column":10,"nodeType":"149","messageId":"150","endLine":60,"endColumn":22},{"ruleId":"147","severity":1,"message":"182","line":2,"column":20,"nodeType":"149","messageId":"150","endLine":2,"endColumn":29},{"ruleId":"147","severity":1,"message":"183","line":3,"column":8,"nodeType":"149","messageId":"150","endLine":3,"endColumn":13},{"ruleId":"147","severity":1,"message":"152","line":2,"column":10,"nodeType":"149","messageId":"150","endLine":2,"endColumn":18},{"ruleId":"147","severity":1,"message":"182","line":2,"column":20,"nodeType":"149","messageId":"150","endLine":2,"endColumn":29},{"ruleId":"147","severity":1,"message":"183","line":4,"column":8,"nodeType":"149","messageId":"150","endLine":4,"endColumn":13},{"ruleId":"144","severity":1,"message":"145","line":16,"column":13,"nodeType":"146","endLine":16,"endColumn":37},{"ruleId":"147","severity":1,"message":"152","line":2,"column":9,"nodeType":"149","messageId":"150","endLine":2,"endColumn":17},{"ruleId":"147","severity":1,"message":"182","line":2,"column":19,"nodeType":"149","messageId":"150","endLine":2,"endColumn":28},{"ruleId":"147","severity":1,"message":"183","line":3,"column":8,"nodeType":"149","messageId":"150","endLine":3,"endColumn":13},"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-unused-vars","'AllPokemon' is defined but never used.","Identifier","unusedVar","'renderPokemonCards' is defined but never used.","'useState' is defined but never used.","no-throw-literal","Expected an error object to be thrown.","ThrowStatement","object","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'ability'. Either include it or remove the dependency array.","ArrayExpression",["184"],"React Hook useEffect has missing dependencies: 'backup_name', 'dummy', and 'getData'. Either include them or remove the dependency array.",["185"],"Expected '!==' and instead saw '!='.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","React Hook useEffect has a missing dependency: 'getData'. Either include it or remove the dependency array.",["186"],"React Hook useEffect has a missing dependency: 'getMoves'. Either include it or remove the dependency array.",["187"],"React Hook useEffect has a missing dependency: 'getMoveDetails'. Either include it or remove the dependency array.",["188"],"React Hook useEffect has a missing dependency: 'getTier'. Either include it or remove the dependency array.",["189"],"'Types' is defined but never used.","'errorMessage' is assigned a value but never used.","'useEffect' is defined but never used.","'axios' is defined but never used.",{"desc":"190","fix":"191"},{"desc":"192","fix":"193"},{"desc":"194","fix":"195"},{"desc":"196","fix":"197"},{"desc":"198","fix":"199"},{"desc":"200","fix":"201"},"Update the dependencies array to be: [ability]",{"range":"202","text":"203"},"Update the dependencies array to be: [backup_name, dummy, getData, mon]",{"range":"204","text":"205"},"Update the dependencies array to be: [getData, id]",{"range":"206","text":"207"},"Update the dependencies array to be: [getMoves, name]",{"range":"208","text":"209"},"Update the dependencies array to be: [getMoveDetails, moveURL]",{"range":"210","text":"211"},"Update the dependencies array to be: [getTier, name]",{"range":"212","text":"213"},[997,999],"[ability]",[1925,1930],"[backup_name, dummy, getData, mon]",[832,836],"[getData, id]",[1600,1606],"[getMoves, name]",[1020,1029],"[getMoveDetails, moveURL]",[1090,1096],"[getTier, name]"]